/**
 * Created by 808648 on 24.04.2016.
 */
"use strict";
var common = function (l) {
    return function (x, y, z) {
        return l(x, y, z);
    }
};

var unary = function (l) {
    return function (f) {
        return function (x, y, z) {
            return l(f(x, y, z));
        }
    }
};

var binary = function (l) {
    return function (f, g) {
        return function (x, y, z) {
            return l(f(x, y, z), g(x, y, z));
        }
    }
};

var operation = function (l) {
    return function () {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
            args[i] = arguments[i];
        }
        return function (x, y, z) {
            return l.apply(null, args.map(function (f) {
                return f(x, y, z);
            }));
        }
    }
};

var variable = function (a) {
    return function (x, y, z) {
        if (a == "x") {
            return x;
        }
        if (a == "y") {
            return y;
        }
        if (a == "z") {
            return z;
        }
    }
};


var add = operation(function (x, y) {
    return x + y;
});

var divide = operation(function (x, y) {
    return x / y;
});

var subtract = operation(function (x, y) {
    return x - y;
});

var multiply = operation(function (x, y) {
    return x * y
});
var mod = operation(function (f, g) {
    return f % g
});

var power = operation(Math.pow);

var abs = operation(Math.abs);

var log = operation(Math.log);

var cnst = function (e) {
    return function (x, y, z) {
        return e;
    }
};

var negate = operation(function (e) {
    return -e;
});

var expr = new add(
    new variable('x'),
    new cnst(2)
);
//console.log(expr(5, 1, 2));

/*
 var operations = [];
 operations['+'] = binaryFunc;

 */
var binOperands = {
    "+": add,
    "-": subtract,
    "/": divide,
    "**": power,
    "%": mod,
    "*": multiply
};

var unOperands = {
    "log": log,
    "abs": abs,
    "negate": negate
};

var parse = function (s) {
    return s.trim().split(/\s+/).reduce(function (stack, cur) {

        var binaryFunc = function (func) {
            var first = stack.pop();
            var second = stack.pop();
            stack.push(new func(second, first));
            return stack;
        };

        var unaryFunc = function (func) {
            stack.push(new func(stack.pop()));
            return stack;
        };

        if (cur in binOperands) {
            return binaryFunc(binOperands[cur]);
        } else {
            if (cur in unOperands) {
                return unaryFunc(unOperands[cur]);
            } else {
                if (cur == 'x' || cur == 'y' || cur == 'z')
                    stack.push(new variable(cur));
                else
                    stack.push(new cnst(+cur));
                return stack;
            }
        }
    }, [])[0];
};



//parse("      x")(5);
//(parse('4 z *')(1.00000000000000000000, 1.00000000000000000000, 2.00000000000000000000));
//var s = '     x  2  +   ';
//var ar = s.trim().split(/\s+/);
//console.log(ar);

/* switch (cur) {
 //   operations[cur](add);
 case '+':
 return binaryFunc(add);
 break;
 case '-':
 return binaryFunc(subtract);
 break;
 case '/':
 return binaryFunc(divide);
 break;
 case '*':
 return binaryFunc(multiply);
 break;
 case '%':
 return binaryFunc(mod);
 break;
 case '**':
 return binaryFunc(power);
 break;
 case 'log':
 return unaryFunc(log);
 break;
 case 'abs':
 return unaryFunc(abs);
 break;
 default:
 if (cur == 'x' || cur == 'y' || cur == 'z')
 stack.push(new variable(cur));
 else
 stack.push(new cnst(+cur));
 return stack;
 }*/
