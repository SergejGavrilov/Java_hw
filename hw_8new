/**
 * Created by 808648 on 24.04.2016.
 */

var variable = function (a) {
    return function (x, y, z) {
        if (a == "x") {
            return x;
        }
        if (a == "y") {
            return y;
        }
        if (a == "z") {
            return z;
        }
    }
};

var common = function (l) {
    return function (x, y, z) {
        return l(x, y, z);
    }
};

var binary = function (l) {
    return function (f, g) {
        return function (x, y, z) {
            return l(f(x, y, z), g(x, y, z));
        }
    }
};

var unary = function (l) {
    return function (f) {
        return function (x, y, z) {
            return l(f(x, y, z));
        }
    }
};

var common = function(){};

var add = binary(function (x, y) {
    return x + y;
});

var divide = binary(function (x, y) {
    return x / y;
});

var subtract = binary(function (x, y) {
    return x - y;
});

var multiply = binary(function (x, y) {
    return x * y
});
var mod = binary(function (f, g) {
    return f % g
});

var power = binary(Math.pow);

var abs = unary(Math.abs);

var log = unary(Math.log);

var cnst = function (e) {
    return function (x, y, z) {
        return e;
    }
};

var negate = unary(function (e) {
    return -e;
});

var expr = new power(
    new negate(
        new cnst(4)),
    new cnst(2)
);

//var r = [];


var parse = function (s) {
    return s.split(' ').reduce(function (stack, cur) {
        var binaryFunc = function (func) {
            var first = stack.pop();
            var second = stack.pop();
            stack.push(new func(second, first));
            return stack;
        };

        var unaryFunc = function (func) {
            stack.push(new func(stack.pop()));
            return stack;
        };

        switch (cur) {
            case '+':
                return binaryFunc(add);
                break;
            case '-':
                return binaryFunc(subtract);
                break;
            case '/':
                return binaryFunc(divide);
                break;
            case '*':
                return binaryFunc(multiply);
                break;
            case '%':
                return binaryFunc(mod);
                break;
            case '**':
                return binaryFunc(power);
                break;
            case 'log':
                return unaryFunc(log);
                break;
            case 'abs':
                return unaryFunc(abs);
                break;
            default:
                if (cur == 'x' || cur == 'y' || cur == 'z')
                    stack.push(new variable(cur));
                else
                    stack.push(new cnst(+cur));
                return stack;
        }

    }, [])[0];

};

console.log(parse("x x 2 - * x * 1 +")(5));
//console.log(expr(5, 1, 2));
